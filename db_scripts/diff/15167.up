<<<<<<< HEAD
SET AUTOCOMMIT=0;
USE billing;

create table if not exists billing_fees_raw like billing_fees;
select `AUTO_INCREMENT` into @auto_increment_billing_fees from INFORMATION_SCHEMA.TABLES where TABLE_SCHEMA = database() AND TABLE_NAME   = 'billing_fees';

SET @sql = CONCAT("alter table billing_fees_raw auto_increment=",@auto_increment_billing_fees); 
PREPARE stmt FROM @sql; 
EXECUTE stmt; 
DEALLOCATE PREPARE stmt;


DELIMITER //
DROP PROCEDURE IF EXISTS fill_billing_fees;
CREATE PROCEDURE fill_billing_fees(IN in_profile_id INT)
BEGIN

    DECLARE columns varchar(1023);
    DECLARE statement varchar(1023);
    
    SET @profile_id = in_profile_id;
    
    SELECT group_concat(COLUMN_NAME) INTO columns FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = database() AND TABLE_NAME = 'billing_fees_raw' AND COLUMN_NAME NOT IN ('id');
    
SET @statement = concat("insert into billing_fees(id,",columns,")
select min_id,",columns,"
from billing_fees_raw bnu 
inner join (
    select min(i_nu.id) min_id 
    from billing_fees_raw i_nu 
    left join billing.billing_fees i_u 
        on i_nu.billing_profile_id=i_u.billing_profile_id 
        and i_nu.source=i_u.source 
        and i_nu.destination=i_u.destination 
        and i_nu.direction=i_u.direction 
        and i_nu.type=i_u.type 
    where i_u.id is null ",
    if( @profile_id is not null, " and i_nu.billing_profile_id = ? ", " and 1 = ? "),
    " group by i_nu.billing_profile_id,i_nu.source,i_nu.destination,i_nu.direction,i_nu.type
) u on bnu.id=u.min_id");
    select @statement;
    IF @profile_id is null THEN SET @profile_id = 1; END IF;
    PREPARE stmt FROM @statement;
    EXECUTE stmt USING @profile_id;
    DEALLOCATE PREPARE stmt;
END//

DELIMITER ;

insert into billing_fees_raw select * from billing_fees;
delete from billing_fees;
CREATE UNIQUE INDEX billing_fees_unique on billing_fees (billing_profile_id,source,destination,direction,type);


CALL fill_billing_fees(null);


 

COMMIT;


=======
USE billing;

CREATE TABLE `billing_networks` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `reseller_id` int(11) unsigned DEFAULT NULL,
  `name` varchar(255) NOT NULL,
  `description` varchar(255) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `bn_resname_idx` (`reseller_id`,`name`),
  CONSTRAINT `bn_reseller_ref` FOREIGN KEY (`reseller_id`) REFERENCES `resellers` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

CREATE TABLE `billing_network_blocks` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `network_id` int(11) unsigned NOT NULL,
  `ip` varchar(39) NOT NULL,
  `mask` tinyint(1) unsigned DEFAULT NULL,
  `_ipv4_net_from` varbinary(4) DEFAULT NULL,
  `_ipv4_net_to` varbinary(4) DEFAULT NULL,
  `_ipv6_net_from` varbinary(16) DEFAULT NULL,
  `_ipv6_net_to` varbinary(16) DEFAULT NULL,
  PRIMARY KEY (`id`),
  INDEX `bnb_ipv4_from_idx` (`_ipv4_net_from`),
  INDEX `bnb_ipv4_to_idx` (`_ipv4_net_to`),
  INDEX `bnb_ipv6_from_idx` (`_ipv6_net_from`),
  INDEX `bnb_ipv6_to_idx` (`_ipv6_net_to`),
  CONSTRAINT `bnb_network_ref` FOREIGN KEY (`network_id`) REFERENCES `billing_networks` (`id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

ALTER TABLE `billing_mappings` ADD `network_id` int(11) unsigned DEFAULT NULL AFTER `PRODUCT_id`;
ALTER TABLE `billing_mappings` ADD CONSTRAINT `bm_network_ref` FOREIGN KEY (`network_id`) REFERENCES `billing_networks` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
>>>>>>> aa461d6... MT#12643 billing network, profile packages
